// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StreamSample.Context;

#nullable disable

namespace StreamSample.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220623144507_UpdateDataSeeding1")]
    partial class UpdateDataSeeding1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.6");

            modelBuilder.Entity("StreamSample.Models.TodoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Done")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("TodoListId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TodoListId");

                    b.ToTable("TodoItem");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Done = false,
                            Name = "Create control models",
                            TodoListId = 1
                        },
                        new
                        {
                            Id = 2,
                            Done = false,
                            Name = "Create BaseStrategy",
                            TodoListId = 1
                        },
                        new
                        {
                            Id = 3,
                            Done = false,
                            Name = "Create and test a FormControl strategy",
                            TodoListId = 1
                        },
                        new
                        {
                            Id = 4,
                            Done = false,
                            Name = "Create and test a FormGroup strategy",
                            TodoListId = 1
                        },
                        new
                        {
                            Id = 5,
                            Done = false,
                            Name = "Create and test a FormArray strategy",
                            TodoListId = 1
                        },
                        new
                        {
                            Id = 6,
                            Done = false,
                            Name = "Create and test a FromValue attribute",
                            TodoListId = 1
                        },
                        new
                        {
                            Id = 7,
                            Done = false,
                            Name = "Implement and test valiadtors processing logic",
                            TodoListId = 1
                        },
                        new
                        {
                            Id = 8,
                            Done = false,
                            Name = "Pass the created data structure to the frontend",
                            TodoListId = 1
                        },
                        new
                        {
                            Id = 9,
                            Done = false,
                            Name = "Create the FormBuilder class",
                            TodoListId = 2
                        },
                        new
                        {
                            Id = 10,
                            Done = false,
                            Name = "Build a FormGroup based on an obtained data structure",
                            TodoListId = 2
                        },
                        new
                        {
                            Id = 11,
                            Done = false,
                            Name = "Add validation to FormControls",
                            TodoListId = 2
                        },
                        new
                        {
                            Id = 12,
                            Done = false,
                            Name = "Extend the FormArray in order to push new elements",
                            TodoListId = 2
                        },
                        new
                        {
                            Id = 13,
                            Done = false,
                            Name = "Replace the manually created FormGroup with the generated one",
                            TodoListId = 2
                        });
                });

            modelBuilder.Entity("StreamSample.Models.TodoList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TodoLists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Backend",
                            Tags = "[\"Create data structure\",\"Add validation based on attributes\"]"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Frontend",
                            Tags = "[\"Convert a data structire to the FormGroup\",\"Add validation\"]"
                        });
                });

            modelBuilder.Entity("StreamSample.Models.TodoItem", b =>
                {
                    b.HasOne("StreamSample.Models.TodoList", null)
                        .WithMany("Items")
                        .HasForeignKey("TodoListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StreamSample.Models.TodoList", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
